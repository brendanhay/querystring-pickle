:set -isrc
:set -XDeriveGeneric
:set -XOverloadedStrings

:load Network.HTTP.QueryString.Pickle

import           Data.ByteString       (ByteString)
import qualified Data.ByteString.Char8 as BS
import           GHC.Generics
import           System.IO

hSetBuffering stdout LineBuffering

instance IsQuery a => IsQuery (Maybe a) where queryPickler = qpOption queryPickler

instance (IsQuery a, IsQuery b) => IsQuery (Either a b) where queryPickler = queryPickler `qpEither` queryPickler

data A = A { aInt1 :: Int, aInt2 :: Int } deriving (Show, Generic)
data B = B { bA :: Maybe A } deriving (Show, Generic)
data C = C { cB :: B } deriving (Show, Generic)
data D = D { dAInt :: Either A Int } deriving (Show, Generic)

instance IsQuery A
instance IsQuery B
instance IsQuery C
instance IsQuery D

let c = C $ B Nothing
let d = D . Left $ A 1 2
let e = D $ Right 3


instance IsQuery a => IsQuery [a] where queryPickler = qpOrdinalList queryPickler

data E = E { eInts :: [Int] } deriving (Show, Generic)

instance IsQuery E
