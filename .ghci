:set -isrc
:set -XDeriveGeneric
:set -XOverloadedStrings

:load Network.HTTP.QueryString.Pickle

import           Data.ByteString       (ByteString)
import qualified Data.ByteString.Char8 as BS
import           GHC.Generics
import           System.IO

hSetBuffering stdout LineBuffering

-- Instances

instance IsQuery a => IsQuery (Maybe a) where queryPickler = qpOption queryPickler

-- Maybe

data A = A { aInt1 :: Int, aInt2 :: Int } deriving (Show, Generic)
data B = B { bA :: Maybe A } deriving (Show, Generic)
data C = C { cB :: B } deriving (Show, Generic)

instance IsQuery A
instance IsQuery B
instance IsQuery C

let b = C $ B Nothing
let bQry = toQuery b

-- Either

data D = D { eIntA :: Either (Maybe Int) A } deriving (Show, Generic)

instance IsQuery D

let d = D . Right $ A 1 2
let dQry = toQuery d






